package main

import (
	"fmt"
)

func CountProfit(data [][][2]int) []int {
	r := []int{}
	fmt.Println(len(data))
	if len(data) == 0 {

	} else if len(data) == 1 {
		sum := sumProfit(data)
		for _, v := range sum {
			r = append(r, v)
		}
	} else if len(data[0]) == 1 {
		sum := sumProfit(data)
		count := 0
		for _, v := range sum {
			count += v
		}
		r = append(r, count)
	} else {
		var res = map[int]int{}
		for _, a := range data {
			// sum1 := 0
			for i, b := range a {
				sum2 := 0
				for _, c := range b {
					if sum2 == 0 {
						sum2 += c
					} else {
						sum2 -= c
						res[i] += sum2
					}
				}
			}
			// r = append(r, sum1)
		}
		fmt.Println(res)
		for i := 0; i < len(res); i++ {
			r = append(r, res[i])
		}
	}

	return r
}
func sumProfit(data [][][2]int) []int {
	r := []int{}
	for _, a := range data {
		for _, b := range a {
			sum := 0
			for _, c := range b {
				if sum == 0 {
					sum += c
				} else {
					sum -= c
					r = append(r, sum)
				}
			}
		}
	}
	return r
}
func main() {
	a := [][][2]int{
		{
			{1000, 800},
			{700, 500},
			{100, 50},
			{900, 200},
			{500, 200},
			{700, 500},
			{1000, 800},
			{900, 200},
			{700, 500},
			{100, 50},
		},
		{{700, 500}, {1000, 800}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}, {100, 50}, {900, 200}, {500, 200}},
		{{1000, 800}, {900, 200}, {500, 200}, {700, 500}, {100, 50}, {500, 200}, {700, 500}, {1000, 800}, {900, 200}, {1000, 900}},
		{{1000, 800}, {700, 500}, {100, 50}, {900, 200}, {500, 200}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}},
		{{700, 500}, {100, 50}, {900, 200}, {500, 200}, {1000, 800}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}},
		{{1000, 900}, {900, 200}, {500, 200}, {900, 200}, {500, 200}, {700, 500}, {100, 50}, {500, 200}, {700, 500}, {1000, 800}},
		{{700, 500}, {100, 50}, {900, 200}, {500, 200}, {1000, 800}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}},
		{{1000, 800}, {700, 500}, {100, 50}, {900, 200}, {500, 200}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}},
		{{700, 500}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}, {100, 50}, {900, 200}, {500, 200}, {1000, 800}},
		{{700, 500}, {1000, 800}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}, {100, 50}, {900, 200}, {500, 200}},
		{{1000, 800}, {900, 200}, {500, 200}, {700, 500}, {100, 50}, {500, 200}, {700, 500}, {1000, 800}, {900, 200}, {1000, 900}},
		{{1000, 800}, {700, 500}, {100, 50}, {900, 200}, {500, 200}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}},
		{{700, 500}, {100, 50}, {900, 200}, {500, 200}, {1000, 800}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}},
		{{1000, 900}, {900, 200}, {500, 200}, {900, 200}, {500, 200}, {700, 500}, {100, 50}, {500, 200}, {700, 500}, {1000, 800}},
		{{700, 500}, {100, 50}, {900, 200}, {500, 200}, {1000, 800}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}},
		{{1000, 900}, {900, 200}, {500, 200}, {900, 200}, {500, 200}, {700, 500}, {100, 50}, {500, 200}, {700, 500}, {1000, 800}},
		{{700, 500}, {100, 50}, {900, 200}, {500, 200}, {1000, 800}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}},
		{{1000, 800}, {700, 500}, {100, 50}, {900, 200}, {500, 200}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}},
		{{700, 500}, {100, 50}, {900, 200}, {500, 200}, {1000, 800}, {700, 500}, {1000, 800}, {900, 200}, {700, 500}, {100, 50}},
	}

	// [4, 8]
	b := [][][2]int{
		{
			{1000, 500},
			{500, 150},
			{600, 100},
			{800, 750},
		},
	}
	// [500, 350, 500, 50]
	// len(arr) == 2 dan item nya == int
	c := [][][2]int{
		{
			{1000, 200},
		},
		{
			{500, 100},
		},
		{
			{450, 150},
		},
		{
			{100, 50},
		},
	}
	// [1550]

	// Tipe > 1 Cabang  -> [2]int -> arr[0] ->
	// var result interface{}
	// switch "[2]int" {
	// case fmt.Sprintf("%T", b):
	// 	fmt.Println("1")
	// case fmt.Sprintf("%T", b[0]):
	// 	fmt.Println("2")
	// case fmt.Sprintf("%T", b[0][0]):
	// 	var r []int
	// 	for i, value := range c {
	// 		if i == 0 {
	// 			r = append(r, 0)
	// 		}
	// 		fmt.Println("va: ", value[0][0]-value[0][1])
	// 		profit := value[0][0] - value[0][1]
	// 		r[0] += profit

	// 	}
	// 	fmt.Println(r)
	// }
	// fmt.Println(result)

	//
	//
	//
	//
	fmt.Println(CountProfit(a))
	fmt.Println(CountProfit(b))
	fmt.Println(CountProfit(c))
}
